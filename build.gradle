plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.6'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.flywaydb.flyway' version '6.5.4'
}

group = 'com.rdoneux'
version = '0.0.1-SNAPSHOT'

// LOAD .ENV PROPERTIES
def envFile = file('.env')
def props = new Properties()
if(envFile.exists()) {
	envFile.withInputStream{
		props.load(it)
	}
} else {
	println ".env file not found, defaulting to system variables"
}
// **********************

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.6.3'
	implementation group: 'com.mysql', name: 'mysql-connector-j', version: '9.1.0'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.18.1'

	compileOnly 'org.projectlombok:lombok'
	compileOnly 'org.flywaydb:flyway-core'
	compileOnly 'org.flywaydb:flyway-mysql'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation'org.mockito:mockito-core'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

flyway {
    url = "jdbc:mysql://localhost:${System.getenv('DB_PORT') ?: props['DB_PORT']}/${System.getenv('DB_NAME') ?: props['DB_NAME']}"
    user = System.getenv('DB_USER') ?: props['DB_USER']
    password = System.getenv('DB_PASSWORD') ?: props['DB_PASSWORD']
    locations = ['classpath:db/migration']

	println "jdbc:mysql://localhost:${System.getenv('DB_PORT') ?: props['DB_PORT']}/${System.getenv('DB_NAME') ?: props['DB_NAME']}"
	println System.getenv('DB_USER') ?: props['DB_USER']
	println System.getenv('DB_PASSWORD') ?: props['DB_PASSWORD']
}

// // we need to build classes before we can migrate
// flywayMigrate.dependsOn classes

tasks.named('test') {
	useJUnitPlatform()
}

task printVersion {
	doLast {
		println project.version
	}
}
