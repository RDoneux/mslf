pipeline {
    agent any

    environment {
        DB_PASSWORD='mysql'
        DB_NAME='testdatabase'
        DB_USER='mysql'
        DB_PORT='3307'

        SPRING_PROFILE='dev'

        RAILWAY_TOKEN = credentials("MSLF_RAILWAY_TOKEN")
        DOCKER_IMAGE = 'rdoneux/mslf'
    }

    stages {

        stage('Prepare Environment') {
            steps {
                script {
                    env.TAG_NAME = sh(script: "./gradlew -q printVersion", returnStdout: true).trim()
                    env.TAG_NAME = "${env.TAG_NAME}.${env.BUILD_NUMBER}"
                }
                sh 'docker-compose up -d'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh './gradlew dependencies'
            }
        }

        stage('Test') {
            steps {
                sh '''

                    ./gradlew flywayClean flywayMigrate
                    ./gradlew clean test
                    docker-compose down --remove-orphans
                '''
            }
        }

        stage('Package') {
            when {
                anyOf {
                    branch 'main'
                    branch 'production'
                }
            }
            steps {
                sh './gradlew bootJar'
            }
        }

        stage('Archive Artifacts') {
            when {
                anyOf {
                    branch 'main'
                    branch 'production'
                }
            }
            steps {
                archiveArtifacts artifacts: "build/libs/*.jar", fingerprint: true
            }
        }

        stage('Create Github Release') {
            when {
                branch 'production'
            }
            steps {
                script {
                    createGitHubRelease(
                        repository: 'rdoneux/mslf',
                        credentialId: 'GITHUB_ACCESS_TOKEN',
                        tag: "${env.TAG_NAME}",
                        commitish: "production",
                        name: "Release ${env.TAG_NAME}",
                    )
                }
            }
        }

        stage('Publish to Docker Hub') {
            when {
                branch 'production'
            }
            steps {
                sh "docker build -t $DOCKER_IMAGE:${env.TAG_NAME} ."
                withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                    sh "docker push $DOCKER_IMAGE:${env.TAG_NAME}"
                }
            }
            post {
                always {
                    sh "docker rmi $DOCKER_IMAGE:${env.TAG_NAME} || true"
                }
            }
        }

         stage('Deploy') {
            when {
                branch 'production'
            }
            steps {
                script {
                    // Install Railway CLI
                    sh 'npm i @railway/cli'
                    // Add node_modules/.bin to PATH
                    env.PATH = "${env.WORKSPACE}/node_modules/.bin:${env.PATH}"
                    sh 'railway up --detach --service mslf'
                }
            }
        }

    }
}
